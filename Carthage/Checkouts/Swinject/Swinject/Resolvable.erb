//
//  Resolvable.swift
//  Swinject
//
//  Created by Yoichi Tagaya on 8/18/15.
//  Copyright (c) 2015 Swinject Contributors. All rights reserved.
//

//
// NOTICE:
//
// Resolvable.swift is generated from Resolvable.erb by ERB.
// Do NOT modify Container.Arguments.swift directly.
// Instead, modify Resolvable.erb and run `script/gencode` at the project root directory to generate the code.
//

<% arg_count = 12 %>
<% argument_text = lambda { |n| n == 1 ? "#{n} argument" : "#{n} arguments" } %>

public protocol Resolvable {
    /// Retrieves the instance with the specified service type.
    ///
    /// - Parameter serviceType: The service type to resolve.
    ///
    /// - Returns: The resolved service type instance, or nil if no service is found.
    func resolve<Service>(serviceType: Service.Type) -> Service?

    /// Retrieves the instance with the specified service type and registration name.
    ///
    /// - Parameters:
    ///   - serviceType: The service type to resolve.
    ///   - name:        The registration name.
    ///
    /// - Returns: The resolved service type instance, or nil if no service with the name is found.
    func resolve<Service>(serviceType: Service.Type, name: String?) -> Service?

<% (1..arg_count).each do |i| %>
<%   arg_types = (1..i).map { |n| "Arg#{n}" }.join(", ") %>
<%   arg_params = (1..i).map { |n| "arg#{n}: Arg#{n}" }.join(", ") %>
    /// Retrieves the instance with the specified service type and <%= argument_text.call(i) %> to the factory closure.
    ///
    /// - Parameters:
    ///   - serviceType: The service type to resolve.
<%   (1..i).each do |n| %>
    ///   - arg<%= n %>:        An argument to the factory closure as Arg<%= n %> type.
<%   end %>
    ///
    /// - Returns: The resolved service type instance, or nil if no registration for the service type
    ///            and <%= argument_text.call(i) %> is found.
    func resolve<Service, <%= arg_types %>>(
        serviceType: Service.Type,
        <%= arg_params %>) -> Service?

    /// Retrieves the instance with the specified service type, <%= argument_text.call(i) %> to the factory closure and registration name.
    ///
    /// - Parameters:
    ///   - serviceType: The service type to resolve.
<%   (1..i).each do |n| %>
    ///   - arg<%= n %>:        An argument to the factory closure as Arg<%= n %> type.
<%   end %>
    ///   - name:        The registration name.
    ///
    /// - Returns: The resolved service type instance, or nil if no registration for the service type,
    ///            <%= argument_text.call(i) %> and name is found.
    func resolve<Service, <%= arg_types %>>(
        serviceType: Service.Type,
        <%= arg_params %>,
        name: String?) -> Service?

<% end %>
}
